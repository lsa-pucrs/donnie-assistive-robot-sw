diff --git a/client_libs/libplayerc++/CMakeLists.txt b/client_libs/libplayerc++/CMakeLists.txt
index 408fd07..89d2bb4 100644
--- a/client_libs/libplayerc++/CMakeLists.txt
+++ b/client_libs/libplayerc++/CMakeLists.txt
@@ -223,7 +223,8 @@ IF (BUILD_PLAYERCC)
                         stereoproxy.cc
                         vectormapproxy.cc
                         wifiproxy.cc
-                        wsnproxy.cc)
+                        wsnproxy.cc
+                        playsoundproxy.cc)
 
     IF (NOT HAVE_NANOSLEEP)
         SET (playerreplaceLib playerreplace)
diff --git a/client_libs/libplayerc++/playerc++.h b/client_libs/libplayerc++/playerc++.h
index 3593d42..812f24f 100644
--- a/client_libs/libplayerc++/playerc++.h
+++ b/client_libs/libplayerc++/playerc++.h
@@ -2991,9 +2991,33 @@ class PLAYERCC_EXPORT WSNProxy : public ClientProxy
     void DataFreq(int nodeID, int groupID, float frequency);
 };
 
+
+/**
+The @p PlaySoundProxy class is used to play an audio file located in the robot's computer.
+*/
+class PLAYERCC_EXPORT PlaySoundProxy : public ClientProxy
+{
+  private:
+
+    void Subscribe(uint32_t aIndex);
+    void Unsubscribe();
+
+    /// the interface data structure
+    playerc_playsound_t *mDevice;
+
+  public:
+    /// constructor
+    PlaySoundProxy(PlayerClient *aPc, uint32_t aIndex=0);
+    /// destructor
+    ~PlaySoundProxy();
+    /// the main method of the proxy, used to send the audio filename to be player
+    void play(char *filename);
+};
+
 /** @} (proxies)*/
 }
 
+
 namespace std
 {
   PLAYERCC_EXPORT std::ostream& operator << (std::ostream& os, const player_point_2d_t& c);
@@ -3043,6 +3067,7 @@ namespace std
   PLAYERCC_EXPORT std::ostream& operator << (std::ostream& os, const PlayerCc::WiFiProxy& c);
   PLAYERCC_EXPORT std::ostream& operator << (std::ostream& os, const PlayerCc::RFIDProxy& c);
   PLAYERCC_EXPORT std::ostream& operator << (std::ostream& os, const PlayerCc::WSNProxy& c);
+  PLAYERCC_EXPORT std::ostream& operator << (std::ostream& os, const PlayerCc::PlaySoundProxy& c);  
 }
 
 #endif
diff --git a/client_libs/libplayerc++/playsoundproxy.cc b/client_libs/libplayerc++/playsoundproxy.cc
new file mode 100644
index 0000000..ce8545d
--- /dev/null
+++ b/client_libs/libplayerc++/playsoundproxy.cc
@@ -0,0 +1,87 @@
+/*
+ *  Player - One Hell of a Robot Server
+ *  Copyright (C) 2000-2003
+ *     Brian Gerkey, Kasper Stoy, Richard Vaughan, & Andrew Howard
+ *   2017: Guilherme Marques and Alexandre Amory
+ *
+ *  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2 of the License, or
+ *  (at your option) any later version.
+ *
+ *  This program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with this program; if not, write to the Free Software
+ *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ */
+/********************************************************************
+ *
+ *  This library is free software; you can redistribute it and/or
+ *  modify it under the terms of the GNU Lesser General Public
+ *  License as published by the Free Software Foundation; either
+ *  version 2.1 of the License, or (at your option) any later version.
+ *
+ *  This library is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *  Lesser General Public License for more details.
+ *
+ *  You should have received a copy of the GNU Lesser General Public
+ *  License along with this library; if not, write to the Free Software
+ *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ ********************************************************************/
+
+/*
+ * $Id: playsoundproxy.cc $
+ */
+
+#include "playerc++.h"
+
+using namespace PlayerCc;
+
+PlaySoundProxy::PlaySoundProxy(PlayerClient *aPc, uint32_t aIndex)
+  : ClientProxy(aPc, aIndex),
+  mDevice(NULL)
+ {
+  Subscribe(aIndex);
+  mInfo = &(mDevice->info);
+}
+
+PlaySoundProxy::~PlaySoundProxy()
+{
+  Unsubscribe();
+}
+
+void PlaySoundProxy::Subscribe(uint32_t aIndex)
+{
+  scoped_lock_t lock(mPc->mMutex);
+  mDevice = playerc_playsound_create(mClient, aIndex);
+  if (NULL==mDevice)
+    throw PlayerError("PlaySoundProxy::PlaySoundProxy()", "could not create");
+
+  if (0 != playerc_playsound_subscribe(mDevice, PLAYER_OPEN_MODE))
+    throw PlayerError("PlaySoundProxy::PlaySoundProxy()", "could not subscribe");
+}
+
+void PlaySoundProxy::Unsubscribe()
+{
+  assert(NULL!=mDevice);
+  scoped_lock_t lock(mPc->mMutex);
+  playerc_playsound_unsubscribe(mDevice);
+  playerc_playsound_destroy(mDevice);
+  mDevice = NULL;
+}
+
+void PlaySoundProxy::play(char *filename)
+{
+  scoped_lock_t lock(mPc->mMutex);
+  if (0 != playerc_playsound_play(mDevice, filename))
+    throw PlayerError("PlaySoundProxy::play()", "error playing file");
+  return;
+}
diff --git a/client_libs/libplayerc/CMakeLists.txt b/client_libs/libplayerc/CMakeLists.txt
index 6090bb9..aecda0e 100644
--- a/client_libs/libplayerc/CMakeLists.txt
+++ b/client_libs/libplayerc/CMakeLists.txt
@@ -55,7 +55,8 @@ SET (playercSrcs    playerc.h
                     dev_stereo.c
                     dev_vectormap.c
                     dev_wifi.c
-                    dev_wsn.c)
+                    dev_wsn.c
+                    dev_playsound.c)
 IF (NOT HAVE_GETTIMEOFDAY)
     SET (playerreplaceLib playerreplace)
 ENDIF (NOT HAVE_GETTIMEOFDAY)
diff --git a/client_libs/libplayerc/dev_playsound.c b/client_libs/libplayerc/dev_playsound.c
new file mode 100644
index 0000000..6d97e9e
--- /dev/null
+++ b/client_libs/libplayerc/dev_playsound.c
@@ -0,0 +1,115 @@
+/*
+ *  libplayerc : a Player client library
+ *  Copyright (C) Andrew Howard 2002-2003
+ *   2017: Guilherme Marques and Alexandre Amory
+ *
+ *  This program is free software; you can redistribute it and/or
+ *  modify it under the terms of the GNU General Public License
+ *  as published by the Free Software Foundation; either version 2
+ *  of the License, or (at your option) any later version.
+ *
+ *  This program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with this program; if not, write to the Free Software
+ *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
+ *
+ */
+/*
+ *  Player - One Hell of a Robot Server
+ *  Copyright (C) Andrew Howard 2003
+ *
+ *
+ *  This library is free software; you can redistribute it and/or
+ *  modify it under the terms of the GNU Lesser General Public
+ *  License as published by the Free Software Foundation; either
+ *  version 2.1 of the License, or (at your option) any later version.
+ *
+ *  This library is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *  Lesser General Public License for more details.
+ *
+ *  You should have received a copy of the GNU Lesser General Public
+ *  License along with this library; if not, write to the Free Software
+ *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ */
+/*  playsound Proxy for libplayerc library.
+ *  Structure based on the rest of libplayerc.
+ */
+#include <assert.h>
+#include <math.h>
+#include <stdlib.h>
+#include <string.h>
+
+#include "playerc.h"
+#include "error.h"
+
+// Local declarations
+void playerc_playsound_putmsg(playerc_playsound_t *device,
+                           player_msghdr_t *header,
+                           player_playsound_cmd_t *data,
+                           size_t len);
+
+// Create a new sound proxy
+playerc_playsound_t *playerc_playsound_create(playerc_client_t *client, int index)
+{
+  playerc_playsound_t *device;
+
+  device = malloc(sizeof(playerc_playsound_t));
+  memset(device, 0, sizeof(playerc_playsound_t));
+  playerc_device_init(&device->info, client, PLAYER_PLAYSOUND_CODE, index,
+                      (playerc_putmsg_fn_t) playerc_playsound_putmsg);
+
+  return device;
+}
+
+// Destroy a sound proxy
+void playerc_playsound_destroy(playerc_playsound_t *device)
+{
+  playerc_device_term(&device->info);
+  free(device);
+}
+
+// Subscribe to the sound device
+int playerc_playsound_subscribe(playerc_playsound_t *device, int access)
+{
+  return playerc_device_subscribe(&device->info, access);
+}
+
+// Un-subscribe from the sound device
+int playerc_playsound_unsubscribe(playerc_playsound_t *device)
+{
+  return playerc_device_unsubscribe(&device->info);
+}
+
+// Process incoming data
+void playerc_playsound_putmsg(playerc_playsound_t *device, player_msghdr_t *header,
+                            player_playsound_cmd_t *data, size_t len)
+//                            char *data, size_t len)
+//                            void *data, size_t len)
+{
+  /* there's no much to do in this proxy.
+     check out for the dev_bumper or dev_opaque to see a not empty, but still simple example.
+     basically, it checks wheter it is the expected header format and it
+     transfers data from 'data' to 'device' for each datatype defined in the interface.
+  */
+}
+
+// set the file to be played into the audio device
+int playerc_playsound_play(playerc_playsound_t *device, char *string)
+{
+  player_playsound_cmd_t cmd;
+  memset(&cmd, 0, sizeof(cmd));
+
+  //strcpy(cmd.filename,filename);
+  memset(&cmd, 0, sizeof(cmd));
+  cmd.string = string;
+  cmd.string_count = strlen(string) + 1;   
+
+  return playerc_client_write(device->info.client,
+    &device->info, PLAYER_PLAYSOUND_CMD_VALUES,&cmd,NULL);
+}
diff --git a/client_libs/libplayerc/playerc.h b/client_libs/libplayerc/playerc.h
index d61d88d..87f06b4 100644
--- a/client_libs/libplayerc/playerc.h
+++ b/client_libs/libplayerc/playerc.h
@@ -3866,6 +3866,42 @@ PLAYERC_EXPORT int playerc_wsn_datafreq(playerc_wsn_t *device, int node_id, int
 /** @} */
 /***************************************************************************/
 
+
+/**************************************************************************/
+/** @ingroup playerc_proxies
+ * @defgroup playerc_proxy_playsound playsound
+ * @brief The PlaySound proxy provides an interface to play audio files stored into the robot's computer.
+
+@{
+*/
+
+/** PlaySound proxy data. */
+typedef struct
+{
+  /** Device info; must be at the start of all device structures. */
+  playerc_device_t info;
+  // if the proxy requires any attribute, it would be placed here
+} playerc_playsound_t;
+
+
+/** Create a playsound proxy. */
+PLAYERC_EXPORT playerc_playsound_t *playerc_playsound_create(playerc_client_t *client, int index);
+
+/** Destroy a playsound proxy. */
+PLAYERC_EXPORT void playerc_playsound_destroy(playerc_playsound_t *device);
+
+/** Subscribe to the sound device. */
+PLAYERC_EXPORT int playerc_playsound_subscribe(playerc_playsound_t *device, int access);
+
+/** Un-subscribe from the playsound device. */
+PLAYERC_EXPORT int playerc_playsound_unsubscribe(playerc_playsound_t *device);
+
+/** Play a playsound file by name. */
+PLAYERC_EXPORT int playerc_playsound_play(playerc_playsound_t *playdevice, char *filename);
+
+/** @} */
+/***************************************************************************/
+
 #ifdef __cplusplus
 }
 #endif
diff --git a/libplayerinterface/CMakeLists.txt b/libplayerinterface/CMakeLists.txt
index 59bb4ea..47d0fbd 100644
--- a/libplayerinterface/CMakeLists.txt
+++ b/libplayerinterface/CMakeLists.txt
@@ -45,7 +45,9 @@ SET (interfaceFiles interfaces/001_player.def
                     interfaces/062_ranger.def
                     interfaces/063_vectormap.def
                     interfaces/064_blackboard.def
-                    interfaces/065_stereo.def)
+                    interfaces/065_stereo.def
+                    interfaces/066_coopobject.def
+                    interfaces/067_playsound.def)
 
 INCLUDE (${PLAYER_CMAKE_DIR}/internal/ProcessInterfaces.cmake)
 
diff --git a/libplayerinterface/interfaces/067_playsound.def b/libplayerinterface/interfaces/067_playsound.def
new file mode 100644
index 0000000..cc8fff9
--- /dev/null
+++ b/libplayerinterface/interfaces/067_playsound.def
@@ -0,0 +1,20 @@
+description{
+@brief Interface to an simpler audio system
+
+It @p plays an audio file stored in the robot's computer.
+}
+
+/** Cmd subtype: play audio file command */
+message { CMD, VALUES, 1, player_playsound_cmd_t };
+
+
+/** @brief Command: audio file
+ * Send a @ref PLAYER_PLAYSOUND_CMD_VALUES cmd to play an audio file
+ **/
+typedef struct player_playsound_cmd
+{
+  /** Length of string */
+  uint32_t string_count;
+  /** The audio filename to be played*/
+  char *string;
+} player_playsound_cmd_t;
