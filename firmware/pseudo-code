


// initialization
do{
	sendRequestConfig() :Asks for CONFIGPACK
	cmd = readCommand()
	blink(LED_CONNECTION)
	power_update()
}while(cmd != CONFIGPACK)
sendPing()

// main loop
while(TRUE) {
	cmd = readCommand()  :Deal with the incoming data from driver
	processCommand(cmd)  :Determines what to do acording the message type
	updateActuators()  :Manipulate the motors speed 
	updateSensors()  :Read each sensor and write in the driver with the correct message type.
	updateIndicators()  :Update leds, vibs and buzzer indicators
	sendData() :Send data in their respective periods
	updateTicks()  :Increment the tickCnt each 1ms (1000us)
}



%processCommand(cmd) {  
%	SWITCH(cmd){
%		CASE PINGPACK:
%			...
%		CASE DIOPACK:
%			...
%		CASE MOTORPACK:
%			...
%	}
%}
%
%void updateSensors(){
%	IF(tickCnt % UPDATE_DIO_FRQ == 0){
%		...
%	}
%	IF(tickCnt % UPDATE_RANGER_FRQ == 0){
%		ranger_update();
%	}
%	IF(tickCnt % 200 == 0){
%		power_update(tickCnt);
%	}
%	bumper_update();
%}
%
%
%sendData(){
%
%	IF(tickCnt % SEND_DIO_FRQ == 0){
%		sendSystemDioMsg(systemDio_data,5);
%	}
%	IF(tickCnt % SEND_RANGER_FRQ == 0){
%		sendRangerMsg(range,6);
%	}
%	IF(tickCnt % SEND_BUMPER_FRQ == 0){
%		sendBumperMsg(bumper,6);
%	}
%	IF(tickCnt % SEND_POWER_FRQ == 0){
%		sendPowerMsg(power);
%	}
%	IF(tickCnt % SEND_PING_FRQ == 0){
%		sendPing();
%	}
%}
%
%sendPowerMsg(data){
%    tx_data[0]=POWERPACK
%    tx_data[1]=lowBytes(data)
%    tx_data[2]=HighBytes(data)
%    tx_data_count = 3
%    writeData(tx_data,tx_data_count)
%}

	-System Message: The data has n bytes. Each byte represents a character. This message is used to sends debug messages to driver.




do{
  sendRequestConfig() //request a robot config from driver
  cmd = readCommand() //receive robot config
  battery_update() //check battery status
}while(cmd != CONFIGPACK) // wait until robot config received

// main loop
while(TRUE) {
  cmd = readCommand()  //Read incoming command from serial port
  processCommand(cmd)  //Execute requested command
  updateSensors()  //Read each sensor and update variables
  updateIndicators()  //Update leds, vibs and buzzer indicators
  sendData() //Send data to serial port
  updateTicks()  //Increment the tickCnt each 1ms (1000us)
}

sendRequestConfig(): 
	This function request the driver's parameters defined in the configuration file (.cfg).
	The parameters can be:
	- kp: PID Proportional parameter.
	- ki: PID integral parameter.
	- kd: PID derivative parameter.

processCommand(cmd): 
	The commands can be:
	- DIOPACK: Controls digital outputs.
	- PINGPACK: Update "lost connection" flag that controls the led connection blinks.
	- MOTORS_SPEED_CMD: Controls the robot speed.

updateSensors():
	This function reads the sensors and update their status into the Arduino's internal memory. The following sensors are updated:
	- System Dio: Read Digital Inputs or outputs status. The System Dio represents leds, buzzers and vibration motors. 
	- Rangers: Measures the distance with the ultrasonic rangers.
	- Bumpers: Read the digital pinf of colision sensors.
	- Battery Meter: Measures the battery voltage.

sendData():
	This function reads the sensor data in Arduino's internal memory and sent it to driver:
	- System Dio Data: The data has 1 byte. Each bit is a digital input or outputs state (on/off).
	- Rangers Data: The data has n bytes. Each byte represents the distance measured in centimeters.
	- Bumpers Data: The data has 1 byte. Each bit represents one bumped surface predefined in cardinal points.
	- Battery Data: The data has 1 byte. The byte represents the battery charge measured in volts.
	- Ping: The data has 1 byte. The ping is a default message sent to request a ping command. If the ping command do not returns the "lost connection" flag turns true; 
	
updateAlerts():
	This function make the indicators like leds, buzzer and vibration motors oscilate if they are active.






arduino = Serial(cfg_serial_port)

//main loop
while(TRUE){
	processIncomingData() //Deal with the incoming data from serial. Determines what to do acording the message type.
	processMessages() // Process incoming messages from Player client.  Calls ProcessMessage() on each pending message.
	usleep(10) //Give robot a chance to change state. May this can lag the sonar update.
}

processIncomingData(){
	serialAvailable = readData()
	IF(serialAvailable){
		IF(DIOPACK) ProcessDioData()
		ELSE IF(RANGERPACK) ProcessRangerData()
		ELSE IF(BUMPERPACK) ProcessBumperData()
		ELSE IF(POWERPACK) ProcessPowerData()
		ELSE IF(SYSTEMMESSAGEPACK) ProcessSystemMessageData()
		ELSE IF(REQUESTCONFIGPACK) ProcessRequestConfig()
		ELSE IF(PINGPACK) ProcessRequestPing()
		ELSE PRINT("unknown message",rx_data)
	}
}

// Handle new data comming from client
ProcessMessage(){	 
	 IF (MatchMessage(PLAYER_DIO_CMD_VALUES)){
			ProcessDioCommand()
			return 0
	 }
	 ELSE IF (MatchMessage(PLAYER_POSITION2D_CMD_POS){
			ProcessPos2dPosCmd())
			return 0
	 }
	 ELSE IF (Message::MatchMessage(PLAYER_POSITION2D_CMD_VEL){
			ProcessPos2dVelCmd();
			return 0
	 }
	 ELSE IF (Message::MatchMessage(PLAYER_POSITION2D_REQ_MOTOR_POWER)){
			Publish(m_position_addr)
			return 0
	 }
	 ELSE IF (Message::MatchMessage(PLAYER_POSITION2D_REQ_GET_GEOM){
			ProcessPos2dGeomReq()
			return 0
	 }

	 // Tell the caller that you don't know how to handle this message
	 return -1
}

ProcessDioData(){             
	Publish(diodata); 
}

ProcessRangerData(){
	FOR(i=0;i<serial_data_len();i++){
		rangerdata[i] = serial_data[i];
	}
	Publish(rangerdata); 
}

ProcessBumperData(){
	FOR(i=0;i<serial_data_len();i++){
		bumperdata[i] = serial_data[i];
	}
	Publish(bumperdata); 
}

ProcessPowerData(){
	aux = aux OR serial_data_low()
	aux = aux OR serial_data_high()

	powerdata.volts = aux/1000; 
	this->Publish(powerdata);
}

















































