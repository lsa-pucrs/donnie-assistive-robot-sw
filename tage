[1mdiff --git a/client/Compiler.cpp b/client/Compiler.cpp[m
[1mindex 0800a0b..2f185f4 100644[m
[1m--- a/client/Compiler.cpp[m
[1m+++ b/client/Compiler.cpp[m
[36m@@ -11,7 +11,8 @@[m [musing std::endl;[m
 ExprTreeEvaluator::ExprTreeEvaluator()[m
 {[m
 [m
[31m-	Donnie = new DonnieClient();[m
[32m+[m	[32m//Donnie = new DonnieClient();[m
[32m+[m	[32m*Donnie = DonnieClient::getInstance();[m
 [m
   	memFlag = 0;[m
   	for_itFlag = 0;[m
[1mdiff --git a/client/DonnieClient.cpp b/client/DonnieClient.cpp[m
[1mindex 050a114..b501021 100644[m
[1m--- a/client/DonnieClient.cpp[m
[1m+++ b/client/DonnieClient.cpp[m
[36m@@ -4,12 +4,146 @@[m
 using namespace std;[m
 using namespace PlayerCc;[m
 [m
[31m-#define STEP_LENGHT 0.05[m
[31m-#define SIDE_RANGER 0.05[m
[31m-#define FRONT_RANGER 0.06[m
[31m-#define BACK_RANGER 0.05[m
[32m+[m[32m//Trocar por const[m
[32m+[m[32m//#define STEP_LENGHT 0.05[m
[32m+[m[32m//#define SIDE_RANGER 0.05[m
[32m+[m[32m//#define FRONT_RANGER 0.06[m
[32m+[m[32m//#define BACK_RANGER 0.05[m
[32m+[m
[32m+[m[32mconst double STEP_LENGHT = 0.05;[m
[32m+[m[32mconst double  SIDE_RANGER = 0.05;[m
[32m+[m[32mconst double  FRONT_RANGER = 0.06;[m
[32m+[m[32mconst double  BACK_RANGER = 0.05;[m
[32m+[m
[32m+[m[32m//Historic[m
[32m+[m[32mHistoric Historic::singleton = Historic();[m
[32m+[m[32mHistoric::Historic()[m
[32m+[m[32m{[m
[32m+[m	[32m this->commandsList = list<Command>();[m[41m [m
[32m+[m	[32m this->iterator = commandsList.begin();[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mHistoric::~Historic(){}[m
[32m+[m
[32m+[m[32mHistoric& Historic::getHistoric()[m
[32m+[m[32m{[m
[32m+[m	[32mreturn singleton;[m
[32m+[m[32m}[m
[32m+[m[32mbool Historic::addCommand(string name, string feedback)[m
[32m+[m[32m{[m
[32m+[m	[32mCommand temp = Command();[m
[32m+[m	[32mtemp.name = name;[m
[32m+[m	[32mtemp.feedback = feedback;[m
[32m+[m	[32mtemp.posx = DonnieClient::getInstance().GetPos(0); //Alterar para pegar a posiÃ§Ã£o do DonnieClient[m
[32m+[m	[32mtemp.posy = DonnieClient::getInstance().GetPos(1); //Alterar para pegar a posiÃ§Ã£o do DonnieClient[m
[32m+[m	[32mtemp.degree = DonnieClient::getInstance().GetPos(2); //Alterar para pegar a posiÃ§Ã£o do DonnieClient[m
[32m+[m	[32mthis->commandsList.push_front(temp);[m
[32m+[m	[32mreturn true;[m
[32m+[m[32m}[m
[32m+[m[32mint Historic::size()[m
[32m+[m[32m{[m
[32m+[m	[32mreturn this->commandsList.size();[m
[32m+[m[32m}[m
[32m+[m[32mbool Historic::resetIterator()[m
[32m+[m[32m{[m
[32m+[m	[32mthis->iterator = commandsList.begin();[m
[32m+[m	[32mreturn true;[m
[32m+[m[32m}[m
[32m+[m[32mstring Historic::getLast()[m
[32m+[m[32m{[m
[32m+[m	[32mif(this->size() == 0)[m
[32m+[m	[32m{[m
[32m+[m		[32mstring resposta = "NÃ£o hÃ¡ nenhum Comando";[m
[32m+[m		[32mreturn resposta;[m
[32m+[m	[32m}[m
[32m+[m	[32mCommand temp = this->commandsList.front();[m
[32m+[m	[32mreturn temp.name;[m
[32m+[m[32m}[m
[32m+[m[32mstring Historic::getLine(int line)[m
[32m+[m[32m{[m
[32m+[m	[32mif(line < 1 || line > this->size())[m
[32m+[m	[32m{[m
[32m+[m		[32mreturn string("Linha Invalida"); // NÃ£o sei se Ã© bom retornar string assim[m
[32m+[m	[32m}[m
[32m+[m	[32mthis->resetIterator();[m
[32m+[m[41m	[m
[32m+[m	[32mfor(int i = 1; i < line; i++)// Need to do this because of the bidirectional nature of the iterator[m
[32m+[m	[32m{[m[41m	[m
[32m+[m		[32miterator++;[m
[32m+[m	[32m}[m
[32m+[m[41m	[m
[32m+[m	[32mCommand temp = *iterator;[m
[32m+[m	[32mreturn temp.name;[m
[32m+[m[32m}[m
[32m+[m[32mstring Historic::previous()[m
[32m+[m[32m{[m
[32m+[m	[32mstring resposta = "";[m
[32m+[m	[32mint iteratorIndex = distance(commandsList.begin(), iterator); //iterator - commandsList.begin();[m
[32m+[m	[32mif(this->size() == 0)[m
[32m+[m	[32m{[m
[32m+[m		[32mresposta += "NÃ£o hÃ¡ nenhum Comando.";[m
[32m+[m		[32mreturn resposta;[m
[32m+[m	[32m}[m
[32m+[m	[32melse if(iterator == commandsList.begin())[m
[32m+[m	[32m{[m
[32m+[m		[32mresposta += "NÃ£o hÃ¡ nenhum comando antes depois dessa linha.\n";[m
[32m+[m	[32m}[m
[32m+[m[41m	[m
 [m
[32m+[m	[32miterator++;[m
[32m+[m	[32miteratorIndex++;[m
[32m+[m	[32mif(iterator == commandsList.end())[m
[32m+[m	[32m{[m
[32m+[m		[32mresposta += "EstÃ¡ Ã© a Ãºltima linha. NÃ£o hÃ¡ comandos depois desta linha.\n";[m[41m	[m
[32m+[m	[32m}[m
[32m+[m	[32mif(iterator == commandsList.begin())[m
[32m+[m	[32m{[m
[32m+[m		[32mresposta += "Esta Ã© a primeira linha. NÃ£o hÃ¡ comandos antes dessa linha.\n";[m
[32m+[m	[32m}[m[41m	[m
[32m+[m	[32mCommand temp = *iterator;[m
[32m+[m		[32mresposta += temp.name;[m
[32m+[m		[32mresposta += "\n";[m
[32m+[m	[32mreturn resposta;[m
[32m+[m[32m}[m
 [m
[32m+[m[32mstring Historic::next()[m
[32m+[m[32m{[m
[32m+[m	[32mstring resposta = "";[m
[32m+[m	[32mint iteratorIndex = distance(commandsList.begin(), iterator); //iterator - commandsList.begin();[m
[32m+[m	[32mif(this->size() == 0)[m
[32m+[m	[32m{[m
[32m+[m		[32mresposta += "NÃ£o hÃ¡ nenhum Comando.";[m
[32m+[m		[32mreturn resposta;[m
[32m+[m	[32m}[m
[32m+[m	[32melse if(iterator == commandsList.begin())[m
[32m+[m	[32m{[m
[32m+[m		[32mresposta += "NÃ£o hÃ¡ nenhum comando depois dessa linha.\n";[m
[32m+[m	[32m}[m
[32m+[m[41m	[m
[32m+[m[41m	[m
[32m+[m	[32miterator--;[m
[32m+[m	[32miteratorIndex--;[m
[32m+[m	[32mif(iterator == commandsList.end())[m
[32m+[m	[32m{[m
[32m+[m		[32mresposta += "Esta Ã© a Ãºltima linha. NÃ£o hÃ¡ comandos depois desta linha.\n";[m[41m	[m
[32m+[m	[32m}[m
[32m+[m	[32mif(iterator == commandsList.begin())[m
[32m+[m	[32m{[m
[32m+[m		[32mresposta += "Esta Ã© a primeira linha. NÃ£o hÃ¡ comandos antes dessa linha.\n";[m
[32m+[m	[32m}[m[41m	[m
[32m+[m	[32mCommand temp = *iterator;[m
[32m+[m		[32mresposta += "O comando foi " + temp.name + "e o resultado foi " + temp.feedback + "\n";[m
[32m+[m	[32mreturn resposta;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m
[32m+[m[32m//Singleton[m
[32m+[m[32mDonnieClient DonnieClient::singleton = DonnieClient();[m
[32m+[m
[32m+[m[32mDonnieClient&  DonnieClient::getInstance()[m
[32m+[m[32m{[m
[32m+[m	[32mreturn singleton;[m
[32m+[m[32m}[m
 [m
 DonnieClient::DonnieClient()[m
 {[m
[36m@@ -37,9 +171,10 @@[m [mDonnieClient::DonnieClient()[m
 	//SHProxy = new RangerProxy(head,3);[m
 [m
 	//speech = new SpeechProxy(robot,0);[m
[31m-[m
[32m+[m[41m	[m
[32m+[m	[32mspeech = new SpeechProxy(robot,0);[m
[32m+[m[41m	[m
 	robot->StartThread();[m
[31m-[m
 }[m
 [m
 int DonnieClient::FrontBumper()[m
[1mdiff --git a/client/DonnieClient.h b/client/DonnieClient.h[m
[1mindex 92961ac..47ca0f4 100644[m
[1m--- a/client/DonnieClient.h[m
[1m+++ b/client/DonnieClient.h[m
[36m@@ -6,7 +6,11 @@[m
 #include "utils.h"[m
 #include <libplayerc++/playerc++.h>[m
 [m
[32m+[m[32m//This file implements the GoDonnie commands[m
[32m+[m
[32m+[m
 using namespace std;[m
[32m+[m[32m//namespace for use with the player library[m
 using namespace PlayerCc;[m
 [m
 //function to get donnie host by environment variable[m
[36m@@ -17,10 +21,50 @@[m [mstruct PathNodes[m
   double posx, posy;[m
 };[m
 [m
[32m+[m[32m//Class to Keep the Commands History[m
[32m+[m[32mclass Historic[m
[32m+[m[32m{[m[41m	[m
[32m+[m	[32mprivate:[m
[32m+[m		[32m//Struct to save commands, no external access alowed[m
[32m+[m		[32mstruct Command {[m
[32m+[m			[32mstring name;[m
[32m+[m			[32mstring feedback;[m
[32m+[m			[32mdouble posx;[m
[32m+[m			[32mdouble posy;[m
[32m+[m			[32mdouble degree;[m
[32m+[m		[32m};[m
[32m+[m		[32mlist<Command> commandsList;[m
[32m+[m		[32m//Bidiretional Iterator[m
[32m+[m		[32mlist<Command>::iterator iterator;[m
[32m+[m		[32mbool resetIterator();[m
[32m+[m[41m		[m
[32m+[m		[32m//Variable to hold Singleton[m[41m [m
[32m+[m		[32mstatic Historic singleton;[m
[32m+[m[41m		[m
[32m+[m		[32m//Block the construction and destruction of the object[m
[32m+[m		[32mHistoric();[m
[32m+[m		[32m~Historic();[m
[32m+[m[41m			[m
[32m+[m	[32mpublic:[m
[32m+[m		[32m//Method to get the Singleton[m
[32m+[m		[32mstatic Historic& getHistoric();[m
[32m+[m[41m		[m
[32m+[m[41m		[m
[32m+[m		[32mbool addCommand(string name, string feedback);[m
[32m+[m		[32mint size();[m
[32m+[m		[32mstring getLast();[m
[32m+[m		[32mstring getLine(int line);[m
[32m+[m		[32mstring previous();[m
[32m+[m		[32mstring next();[m
[32m+[m[32m};[m
 [m
[32m+[m
[32m+[m[32m//Class to comunicate with Player Proxy[m
[32m+[m[32m//Work in progress to turn in a Singleton[m
[32m+[m[32m//The default Player library proxies can be found at http://playerstage.sourceforge.net/doc/Player-2.0.0/player/classPlayerCc_1_1ClientProxy.html[m
 class DonnieClient[m
 {[m
[31m-[m
[32m+[m[32mprivate:[m
   PlayerClient *robot;[m
   //PlayerClient *head;[m
 [m
[36m@@ -36,13 +80,18 @@[m [mclass DonnieClient[m
   RangerProxy *sonarProxy;[m
   //RangerProxy *SHProxy;[m
 [m
[31m-  //SpeechProxy *speech;[m
[32m+[m[32m  SpeechProxy *speech;[m
 [m
   int FrontBumper();[m
   int BackBumper();[m
[31m-[m
[31m-public:[m
[32m+[m[41m	[m
[32m+[m	[32m//Singleton[m
 	DonnieClient();[m
[32m+[m	[32m~DonnieClient();[m
[32m+[m	[32mstatic DonnieClient singleton;[m
[32m+[m[41m	[m
[32m+[m[32mpublic:[m
[32m+[m	[32mstatic DonnieClient& getInstance();[m
 [m
   	void ParaFrente(float arg);[m
   	void ParaTras(float arg);[m
[36m@@ -58,8 +107,13 @@[m [mpublic:[m
   //void Historico();[m
   //void Status();[m
 [m
[31m-  //void Falar(void* data, int arg);[m
[32m+[m	[32m//Que gambiarra feia esse negocio de void*[m
[32m+[m	[32m//Mudar para Overload[m
[32m+[m	[32m//void Falar(void* data, int arg);[m
[32m+[m	[32mbool Falar(int data, int arg);[m
[32m+[m	[32mbool Falar(string text, int arg);[m
[32m+[m[41m	[m
 [m
   //void Sair();[m
 [m
[31m-};[m
\ No newline at end of file[m
[32m+[m[32m};[m
