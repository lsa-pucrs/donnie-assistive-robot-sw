/** \file
 *  This C header file was generated by $ANTLR version 3.2 Sep 23, 2009 12:02:23
 *
 *     -  From the grammar source file : logo.g
 *     -                            On : 2016-08-15 16:23:20
 *     -                for the parser : logoParserParser *
 * Editing it, at least manually, is not wise. 
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The parser logoParser has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 * 
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef plogoParser, which is returned from a call to logoParserNew().
 *
 * The methods in plogoParser are  as follows:
 *
 *  - logoParser_prog_return      plogoParser->prog(plogoParser)
 *  - logoParser_line_return      plogoParser->line(plogoParser)
 *  - logoParser_cmd_return      plogoParser->cmd(plogoParser)
 *  - logoParser_arg_return      plogoParser->arg(plogoParser)
 *  - logoParser_narg_return      plogoParser->narg(plogoParser)
 *  - logoParser_signEXP_return      plogoParser->signEXP(plogoParser)
 *  - logoParser_multEXP_return      plogoParser->multEXP(plogoParser)
 *  - logoParser_expression_return      plogoParser->expression(plogoParser)
 *  - logoParser_comparison_return      plogoParser->comparison(plogoParser)
 *  - logoParser_then_return      plogoParser->then(plogoParser)
 *  - logoParser_elsee_return      plogoParser->elsee(plogoParser)
 *  - logoParser_forblock_return      plogoParser->forblock(plogoParser)
 *  - logoParser_whileblock_return      plogoParser->whileblock(plogoParser)
 *  - logoParser_reptblock_return      plogoParser->reptblock(plogoParser)
 *  - logoParser_procblock_return      plogoParser->procblock(plogoParser)
 *  - logoParser_ife_return      plogoParser->ife(plogoParser)
 *  - logoParser_fore_return      plogoParser->fore(plogoParser)
 *  - logoParser_whilee_return      plogoParser->whilee(plogoParser)
 *  - logoParser_repeat_return      plogoParser->repeat(plogoParser)
 *  - logoParser_make_return      plogoParser->make(plogoParser)
 *  - logoParser_assign_return      plogoParser->assign(plogoParser)
 *  - logoParser_printe_return      plogoParser->printe(plogoParser)
 *  - logoParser_comentario_return      plogoParser->comentario(plogoParser)
 *  - logoParser_procedec_return      plogoParser->procedec(plogoParser)
 *  - logoParser_proceinv_return      plogoParser->proceinv(plogoParser)
 *  - logoParser_atom_return      plogoParser->atom(plogoParser)
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD licence"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_logoParser_H
#define _logoParser_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */
 
#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct logoParser_Ctx_struct logoParser, * plogoParser;



#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule 
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif
typedef struct logoParser_prog_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    logoParser_prog_return;

typedef struct logoParser_line_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    logoParser_line_return;

typedef struct logoParser_cmd_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    logoParser_cmd_return;

typedef struct logoParser_arg_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    logoParser_arg_return;

typedef struct logoParser_narg_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    logoParser_narg_return;

typedef struct logoParser_signEXP_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    logoParser_signEXP_return;

typedef struct logoParser_multEXP_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    logoParser_multEXP_return;

typedef struct logoParser_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    logoParser_expression_return;

typedef struct logoParser_comparison_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    logoParser_comparison_return;

typedef struct logoParser_then_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    logoParser_then_return;

typedef struct logoParser_elsee_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    logoParser_elsee_return;

typedef struct logoParser_forblock_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    logoParser_forblock_return;

typedef struct logoParser_whileblock_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    logoParser_whileblock_return;

typedef struct logoParser_reptblock_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    logoParser_reptblock_return;

typedef struct logoParser_procblock_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    logoParser_procblock_return;

typedef struct logoParser_ife_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    logoParser_ife_return;

typedef struct logoParser_fore_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    logoParser_fore_return;

typedef struct logoParser_whilee_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    logoParser_whilee_return;

typedef struct logoParser_repeat_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    logoParser_repeat_return;

typedef struct logoParser_make_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    logoParser_make_return;

typedef struct logoParser_assign_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    logoParser_assign_return;

typedef struct logoParser_printe_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    logoParser_printe_return;

typedef struct logoParser_comentario_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    logoParser_comentario_return;

typedef struct logoParser_procedec_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    logoParser_procedec_return;

typedef struct logoParser_proceinv_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    logoParser_proceinv_return;

typedef struct logoParser_atom_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    logoParser_atom_return;



/** Context tracking structure for logoParser
 */
struct logoParser_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_PARSER   pParser;


     logoParser_prog_return (*prog)	(struct logoParser_Ctx_struct * ctx);
     logoParser_line_return (*line)	(struct logoParser_Ctx_struct * ctx);
     logoParser_cmd_return (*cmd)	(struct logoParser_Ctx_struct * ctx);
     logoParser_arg_return (*arg)	(struct logoParser_Ctx_struct * ctx);
     logoParser_narg_return (*narg)	(struct logoParser_Ctx_struct * ctx);
     logoParser_signEXP_return (*signEXP)	(struct logoParser_Ctx_struct * ctx);
     logoParser_multEXP_return (*multEXP)	(struct logoParser_Ctx_struct * ctx);
     logoParser_expression_return (*expression)	(struct logoParser_Ctx_struct * ctx);
     logoParser_comparison_return (*comparison)	(struct logoParser_Ctx_struct * ctx);
     logoParser_then_return (*then)	(struct logoParser_Ctx_struct * ctx);
     logoParser_elsee_return (*elsee)	(struct logoParser_Ctx_struct * ctx);
     logoParser_forblock_return (*forblock)	(struct logoParser_Ctx_struct * ctx);
     logoParser_whileblock_return (*whileblock)	(struct logoParser_Ctx_struct * ctx);
     logoParser_reptblock_return (*reptblock)	(struct logoParser_Ctx_struct * ctx);
     logoParser_procblock_return (*procblock)	(struct logoParser_Ctx_struct * ctx);
     logoParser_ife_return (*ife)	(struct logoParser_Ctx_struct * ctx);
     logoParser_fore_return (*fore)	(struct logoParser_Ctx_struct * ctx);
     logoParser_whilee_return (*whilee)	(struct logoParser_Ctx_struct * ctx);
     logoParser_repeat_return (*repeat)	(struct logoParser_Ctx_struct * ctx);
     logoParser_make_return (*make)	(struct logoParser_Ctx_struct * ctx);
     logoParser_assign_return (*assign)	(struct logoParser_Ctx_struct * ctx);
     logoParser_printe_return (*printe)	(struct logoParser_Ctx_struct * ctx);
     logoParser_comentario_return (*comentario)	(struct logoParser_Ctx_struct * ctx);
     logoParser_procedec_return (*procedec)	(struct logoParser_Ctx_struct * ctx);
     logoParser_proceinv_return (*proceinv)	(struct logoParser_Ctx_struct * ctx);
     logoParser_atom_return (*atom)	(struct logoParser_Ctx_struct * ctx);
    // Delegated rules
    const char * (*getGrammarFileName)();
    void	    (*free)   (struct logoParser_Ctx_struct * ctx);
    /* @headerFile.members() */
    pANTLR3_BASE_TREE_ADAPTOR	adaptor;
    pANTLR3_VECTOR_FACTORY		vectors;
    /* End @headerFile.members() */
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API plogoParser logoParserNew         (pANTLR3_COMMON_TOKEN_STREAM instream);
ANTLR3_API plogoParser logoParserNewSSD      (pANTLR3_COMMON_TOKEN_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the parser will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif 
#define HIST      44
#define PT      7
#define FIMREPT      27
#define INFO      12
#define MINUS      17
#define REPTB      26
#define COMP      20
#define MULT      18
#define PROCDEC      41
#define SEMICOLON      4
#define ID      36
#define COMENT      40
#define FORE      32
#define PROCB      28
#define FIMPROC      29
#define EQ      37
#define Latin1_Supplement      45
#define POS      13
#define THEN      21
#define PLUS      16
#define REPEAT      34
#define IFE      30
#define MAKE      35
#define INT      43
#define WHILEE      33
#define SCAN      11
#define WS      5
#define ELSEE      22
#define EOF      -1
#define FIMFOR      24
#define PROCINV      42
#define EOL      46
#define ESPERA      10
#define QUIT      15
#define FIMWHILE      25
#define RANGER      14
#define DIV      19
#define PRINTE      38
#define T__48      48
#define PD      8
#define T__49      49
#define PE      9
#define PF      6
#define STRINGE      39
#define FACA      23
#define T__47      47
#define FIMIF      31
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for logoParser
 * =============================================================================
 */
/** \} */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
